/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sortingroutines;
// import needed for this assignment
import java.util.Random;

/**
 *
 * @author Muntaqa Mahmood
 * January 06, 2020
 * Sorting Routines
 * This project sorts random numbers under 4 types of sorting algorithm and 2 types of sorting order.
 */
public class SortingRountines extends javax.swing.JFrame {

    /**
     * Creates new form SortingRountines
     */
    public SortingRountines() {
        initComponents();
        sortinput.setText("");
        // main input cleared
    }

    public void swap(int arr[], int i, int j){
        // temp value as int
        int temp = arr[i];
        // i value = j value    
        arr[i] = arr[j];    
        // j value set to be equal to temp value
        arr[j] = temp;      
    }
        
    public int separate (int arr[], int left, int right){
            // pivot chosen as first element 
            int pivot = arr[left];
            //i is used to trace all elements smaller than the pivot, swap i with pivot when needed
            int i = left;
            
            // when value is less than the pivot, move it to it's left until it reaches the end of the array
            for (int j = left+1; j <= right; j++){
                if (arr[j] < pivot){
                    i++;
                        swap(arr,i,j);
        }
        }
            // swap i with pivot
            swap (arr,i,left);
            return i;
        }
        
        // declaration of int 
        void sortnum(int arr[], int left, int right){
            if(left < right){// when left int is greater than right int
                // divides array with the pivot
                int p = separate(arr, left, right);
                
                sortnum(arr, left, p-1);
                sortnum(arr, p+1, right);
        }
        }
            
        public int groupdescending (int arr[], int left, int right){// declaration of public int
            // pivot chosen as the first element
            int pivot = arr[left];
            //tracing elements using i and swap i for pivot when necessary
            int i = left;
            
            //forloop for when value is more than the pivot, move it to it's left until it reaches the end of the array
            for (int j = left+1; j <= right; j++){
                if (arr[j] > pivot){
                    i++;
                    swap(arr,i,j);
        }
        }
            //swapping i with the pivot
            swap (arr,i,left);
            return i;
        }

        // declaring integers
        void sortdescending(int arr[], int left, int right){
            if(left < right){// when left int is greater than right int
                // divides array with pivot
                int p = groupdescending(arr, left, right);
                sortdescending(arr, left, p);
                sortdescending(arr, p+1, right);
        }
        }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sortinput = new javax.swing.JTextField();
        sortbutton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orgoutput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        sortoutput = new javax.swing.JTextArea();
        selbutton = new javax.swing.JRadioButton();
        bubbutton = new javax.swing.JRadioButton();
        insbutton = new javax.swing.JRadioButton();
        quibutton = new javax.swing.JRadioButton();
        ascbutton = new javax.swing.JRadioButton();
        desbutton = new javax.swing.JRadioButton();
        exitbutton = new javax.swing.JButton();
        invalidoutput = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Sorting Routines");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Enter the following information:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Sorting Algorithm");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Amount of Numbers to Sort:");

        sortinput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortinputActionPerformed(evt);
            }
        });

        sortbutton.setText("Sort Numbers");
        sortbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortbuttonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Sort Order");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Original Numbers");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Sorted Numbers");

        orgoutput.setEditable(false);
        orgoutput.setColumns(20);
        orgoutput.setRows(5);
        jScrollPane1.setViewportView(orgoutput);

        sortoutput.setEditable(false);
        sortoutput.setColumns(20);
        sortoutput.setRows(5);
        jScrollPane2.setViewportView(sortoutput);

        buttonGroup1.add(selbutton);
        selbutton.setText("Selection");
        selbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selbuttonActionPerformed(evt);
            }
        });

        buttonGroup1.add(bubbutton);
        bubbutton.setText("Bubble");
        bubbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubbuttonActionPerformed(evt);
            }
        });

        buttonGroup1.add(insbutton);
        insbutton.setText("Insertion");
        insbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insbuttonActionPerformed(evt);
            }
        });

        buttonGroup1.add(quibutton);
        quibutton.setText("Quick");
        quibutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quibuttonActionPerformed(evt);
            }
        });

        buttonGroup2.add(ascbutton);
        ascbutton.setText("Ascending");
        ascbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascbuttonActionPerformed(evt);
            }
        });

        buttonGroup2.add(desbutton);
        desbutton.setText("Descending");
        desbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desbuttonActionPerformed(evt);
            }
        });

        exitbutton.setText("Exit");
        exitbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(340, 340, 340)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3)
                        .addGap(35, 35, 35)
                        .addComponent(selbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(159, 159, 159)
                        .addComponent(jLabel5)
                        .addGap(65, 65, 65)
                        .addComponent(ascbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(insbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(quibutton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(153, 153, 153)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(invalidoutput, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(129, 129, 129)
                                        .addComponent(exitbutton))
                                    .addComponent(sortbutton)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(151, 151, 151)
                                .addComponent(bubbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(sortinput, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(241, 241, 241)
                        .addComponent(desbutton)))
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(selbutton))
                    .addComponent(jLabel5)
                    .addComponent(ascbutton))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(bubbutton))
                    .addComponent(desbutton))
                .addGap(7, 7, 7)
                .addComponent(insbutton)
                .addGap(10, 10, 10)
                .addComponent(quibutton)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sortinput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sortbutton)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(invalidoutput, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(exitbutton))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selbuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selbuttonActionPerformed

    private void bubbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bubbuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bubbuttonActionPerformed

    private void insbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insbuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_insbuttonActionPerformed

    private void quibuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quibuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quibuttonActionPerformed

    private void desbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desbuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_desbuttonActionPerformed

    private void ascbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascbuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ascbuttonActionPerformed

    private void sortbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortbuttonActionPerformed
        // TODO add your handling code here:
        // outputs cleared
        orgoutput.setText("");
        sortoutput.setText("");
        invalidoutput.setText("");
        
        // random variable created using the random class
        Random random = new Random();
        
        // try statement for exceptions/errors
        try{
        // 
        int length = Integer.parseInt(sortinput.getText());
        
        // when input is negative
        if (length < 0){
            invalidoutput.setText("Please enter a positive integer.");
        } else {
            
        // creates array with the users input as it's length
        int num [] = new int [length];
        
        // randomizes numbers from the (-1000 to +1000) range and outputs in original # array
        for (int a = 0; a < length; a++){
            num[a] = random.nextInt(1000+1000)-1000;
        }
        
        // outputs unsorted array
        for(int a = 0; a < num.length; a++){
            orgoutput.setText(orgoutput.getText() + num[a] + "\n");
        }
        
        // checks if the sorting algorithm and sort order is selected
        if(selbutton.isSelected() == false && quibutton.isSelected() == false && insbutton.isSelected() == false && bubbutton.isSelected() == false){
            invalidoutput.setText("Please select a sorting algorithm.");
        }
        else if(ascbutton.isSelected() == false && desbutton.isSelected() == false){
            invalidoutput.setText("Please select a sort order.");
        }
        
        // when the ascending button is clicked
        else if (ascbutton.isSelected() == true){
            
            // when the selection button is clicked
            if(selbutton.isSelected() == true){
                for(int a = 0; a < num.length; a++){
                    for(int b = a+1; b < num.length; b++){
                        if(num[a] > num[b]){// swap when "a" is greater than "b" 
                            swap(num, a, b);
        }
        }
        }
                
                // output ascending selection button
            for(int a = 0; a < num.length; a++){
                sortoutput.setText(sortoutput.getText() + num[a] + "\n");
        }
        }
            
            // when bubble button is pressed
            if(bubbutton.isSelected() == true){
                for(int a = 0; a < num.length; a++){
                    for(int b = 0; b < num.length-1; b++){
                        if(num[b] > num[b+1]){
                            // "b" being compared to b+1 and if b > b+1, then swap
                            swap(num, b, b+1);
        }
        }
        }
                
                // output ascending bubble button
                for(int a = 0; a < num.length; a++){
                    sortoutput.setText(sortoutput.getText() + num[a] + "\n");
        }
        }
            
            // when insertion button is pressed
            if(insbutton.isSelected() == true){                
                for (int b = 1; b < num.length; b++){// move elements of the array which are greater than "key"
                    int key = num[b];  
                    int a = b-1;
                    
                    // move element ahead of its current spot
                    while ((a > -1) && (num [a] > key)){  
                        num [a+1] = num [a];  
                        a--;  
        }  
                        num[a+1] = key;  
        }
                
                // output ascending insertion button
                for(int a = 0; a < num.length; a++){
                    sortoutput.setText(sortoutput.getText() + num[a] + "\n");
        }
        }
            
            // when quick button is clicked
            if(quibutton.isSelected() == true){
                sortdescending(num, 0, length-1);  
                // output for quick button
                for(int b = 0; b < num.length; b++){
                    sortoutput.setText(sortoutput.getText() + num[b] + "\n");
            }
            }   
            }
        
        // when descending button is clicked
        else if(desbutton.isSelected() == true){
            
            // when selection button is clicked
            if(selbutton.isSelected() == true){
                for(int a = 0; a < num.length; a++){
                    for(int b = a+1; b < num.length; b++){
                         if(num[a] < num[b]){//if the i element is larger than the j element, swap
                           swap(num, a, b);
            }
            }
            }
                
                // output descending selection button
            for(int a = 0; a < num.length; a++){
                sortoutput.setText(sortoutput.getText() + num[a] + "\n");
            }
            }
            
            // when bubble button is pressed
            if(bubbutton.isSelected() == true){
                for(int a = 0; a < num.length; a++){
                    for(int b = 0; b < num.length-1; b++){
                        if(num[b] < num[b+1]){// "b" being compared to b+1 and if b > b+1, then swap
                            swap(num, b, b+1);
            }
            }
            }
                
                // output descending bubble button
            for(int a = 0; a < num.length; a++){
                sortoutput.setText(sortoutput.getText() + num[a] + "\n");
            }
            }
            
            //if the insertion radio button is selected
            if(insbutton.isSelected() == true){                
                for (int b = 1; b < num.length; b++){  
                    int key = num[b];  
                    int a = b-1;  
                    //move elements of the array that are greater than key
                    //to one element ahead of it's current position
                    while ((a > -1) && (num [a] < key)){  
                        num [a+1] = num [a];  
                        a--;  
            }  
                    num[a+1] = key;  
            }
                
                // output descending insertion button
                for(int a = 0; a < num.length; a++){
                    sortoutput.setText(sortoutput.getText() + num[a] + "\n");
            }
            }
            
            // when quick button is pressed
            if(quibutton.isSelected() == true){
                sortdescending(num, 0, length-1);  
                
                // output descending quick button
                for(int b = 0; b < num.length; b++){
                    sortoutput.setText(sortoutput.getText() + num[b] + "\n");
                }
            }
        }
        }
        // checks to see if input is valid
        } catch (NumberFormatException e){
            invalidoutput.setText("Invalid input, please enter an integer.");
        }
        
    
    }//GEN-LAST:event_sortbuttonActionPerformed

    private void sortinputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortinputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortinputActionPerformed

    private void exitbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbuttonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
        // exits the program
    }//GEN-LAST:event_exitbuttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SortingRountines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SortingRountines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SortingRountines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SortingRountines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SortingRountines().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ascbutton;
    private javax.swing.JRadioButton bubbutton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton desbutton;
    private javax.swing.JButton exitbutton;
    private javax.swing.JRadioButton insbutton;
    private javax.swing.JLabel invalidoutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea orgoutput;
    private javax.swing.JRadioButton quibutton;
    private javax.swing.JRadioButton selbutton;
    private javax.swing.JButton sortbutton;
    private javax.swing.JTextField sortinput;
    private javax.swing.JTextArea sortoutput;
    // End of variables declaration//GEN-END:variables
}
